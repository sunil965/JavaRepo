import java.util.Scanner;


public class UtilitySort 
{
  // Binary search meathod for STRING.
	public static int binarySearch(String array[], String value)
	  {
	      int first = 0;
	      int last = array.length - 1;		    
		  while(first < last)
			{
				int mid = first + (last - first)/2;
				if(value.compareTo(array[mid])==0)
					return mid;
				
			        if(value.compareTo(array[mid])<0)
					last = mid-1; 
			        else
			          first = mid+1;
			 }
		     return -1;
			
	   }
	
	
	// Binary search method for INTEGER
    public int secret(int low, int high)
    {
		
		
		if((high - low)==1)		
			return low;		
		int mid = low + (high - low)/2;
		System.out.println("Is less then "+mid);		
		Scanner sc = new Scanner(System.in);
		if(status = sc.nextBoolean())
					return secret(low, mid );
				else 
					return secret(mid,high);

	}
  
  public static void main(String[] args)
  {
	  Scanner scan = new Scanner(System.in);
      /* Creating object of BST */
      BST bst = new BST(); 
      System.out.println("Binary Search Tree Test\n");          
      char ch;
      /*  Perform tree operations  */
      do    
      {
          System.out.println("\nWhat Operations you want ?\n");
          System.out.println("1. insert ");
          System.out.println("2. delete");
          System.out.println("3. search");
          System.out.println("4. count nodes");
          System.out.println("5. check empty"); 

          int choice = scan.nextInt();            
          switch (choice)
          {
          case 1 : 
              System.out.println("Enter integer element to insert");
              bst.insert( scan.nextInt() );                     
              break;                          
          case 2 : 
              System.out.println("Enter integer element to delete");
              bst.delete( scan.nextInt() );                     
              break;                         
          case 3 : 
              System.out.println("Enter integer element to search");
              System.out.println("Search result : "+ bst.search( scan.nextInt() ));
              break;                                          
          case 4 : 
              System.out.println("Nodes = "+ bst.countNodes());
              break;     
          case 5 :  
              System.out.println("Empty status = "+ bst.isEmpty());
              break;            
          default : 
              System.out.println("Wrong Entry \n ");
              break;   
          }
       

          System.out.println("\nDo you want to continue (Type y or n) \n");
          ch = scan.next().charAt(0);                        
      } while (ch == 'Y'|| ch == 'y');
  }
}
